{
  "name": "toggle",
  "dependencies": [
    "@vueuse/core"
  ],
  "registryDependencies": [
    "utils",
    "toggle",
    "form"
  ],
  "files": [
    {
      "name": "Toggle.vue",
      "content": "<script setup lang=\"ts\">\nimport { type HTMLAttributes, computed } from 'vue'\nimport { Toggle, type ToggleEmits, type ToggleProps, useForwardPropsEmits } from 'radix-vue'\nimport { type ToggleVariants, toggleVariants } from '.'\nimport { cn } from '@/lib/utils'\n\nconst props = withDefaults(defineProps<ToggleProps & {\n  class?: HTMLAttributes['class']\n  variant?: ToggleVariants['variant']\n  size?: ToggleVariants['size']\n}>(), {\n  variant: 'default',\n  size: 'default',\n  disabled: false,\n})\n\nconst emits = defineEmits<ToggleEmits>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, size, variant, ...delegated } = props\n\n  return delegated\n})\n\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\n</script>\n\n<template>\n  <Toggle\n    v-bind=\"forwarded\"\n    :class=\"cn(toggleVariants({ variant, size }), props.class)\"\n  >\n    <slot />\n  </Toggle>\n</template>\n"
    },
    {
      "name": "ToggleWrapper.vue",
      "content": "<script setup lang=\"ts\">\nimport { useVModel } from '@vueuse/core'\nimport type { HTMLAttributes } from 'vue'\nimport { Toggle } from '@/lib/registry/new-york/ui/toggle'\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/lib/registry/new-york/ui/form'\n\nconst props = defineProps<{\n  defaultValue?: boolean\n  modelValue?: boolean\n  class?: HTMLAttributes['class']\n  id?: string\n  name?: string\n  label?: string\n  required?: boolean\n  placeholder?: string\n  description?: string\n  disabled?: boolean\n  loading?: boolean\n  prefix?: string\n  suffix?: string\n}>()\n\nconst emits = defineEmits<{\n  (e: 'update:modelValue', payload: boolean): void\n}>()\n\nconst modelValue = useVModel(props, 'modelValue', emits, {\n  passive: true,\n  defaultValue: props.defaultValue,\n})\n</script>\n\n<template>\n  <FormField v-slot=\"slotProps\" :name=\"props.name || ''\">\n    <FormItem v-bind=\"$attrs\">\n      <FormLabel v-if=\"props.label\">\n        {{ props.label }}\n        <span v-if=\"props.required\" class=\"text-destructive\"> *</span>\n      </FormLabel>\n      <FormControl>\n        <Toggle\n          v-bind=\"slotProps\" :id=\"props.id\" v-model=\"modelValue\"\n          :placeholder=\"props.placeholder\" :disabled=\"props.disabled\" :loading=\"props.loading\" :class=\"props.class\"\n          :prefix=\"props.prefix\" :suffix=\"props.suffix\"\n        />\n      </FormControl>\n      <FormDescription v-if=\"props.description\">\n        {{ props.description }}\n      </FormDescription>\n      <FormMessage />\n    </FormItem>\n  </FormField>\n</template>\n"
    },
    {
      "name": "index.ts",
      "content": "import { type VariantProps, cva } from 'class-variance-authority'\n\nexport { default as Toggle } from './Toggle.vue'\nexport { default as ToggleWrapper } from './ToggleWrapper.vue'\n\nexport const toggleVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-9 px-3',\n        sm: 'h-8 px-2',\n        lg: 'h-10 px-3',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nexport type ToggleVariants = VariantProps<typeof toggleVariants>\n"
    }
  ],
  "type": "components:ui"
}
